// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NIA_CRM.Data;

#nullable disable

namespace NIA_CRM.Data.NIACRMigration
{
    [DbContext(typeof(NIACRMContext))]
    [Migration("20250121003014_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("NIA_CRM.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLineOne")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLineTwo")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MemberID")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("NIA_CRM.Models.Cancellation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Canceled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CancellationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CancellationNote")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MemberID");

                    b.ToTable("Cancellations");
                });

            modelBuilder.Entity("NIA_CRM.Models.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("EMail")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LinkedinUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("NIA_CRM.Models.ContactOrganization", b =>
                {
                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactID", "OrganizationID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("ContactOrganizations");
                });

            modelBuilder.Entity("NIA_CRM.Models.Industry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("NIA_CRM.Models.Interaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InteractionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InteractionNote")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpportunityID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("MemberID");

                    b.HasIndex("OpportunityID")
                        .IsUnique();

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("NIA_CRM.Models.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StandingStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberMembershipType", b =>
                {
                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberID", "MembershipTypeID");

                    b.HasIndex("MembershipTypeID");

                    b.ToTable("MemberMembershipTypes");
                });

            modelBuilder.Entity("NIA_CRM.Models.MembershipType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeDescr")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("MembershipTypes");
                });

            modelBuilder.Entity("NIA_CRM.Models.Opportunity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OpportunityDescr")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpportunityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OpportunityStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("NIA_CRM.Models.Organization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndustryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganizationSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrganizationWeb")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("IndustryID");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("NIA_CRM.Models.OrganizationCode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodeOrganization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("OrganizationCodes");
                });

            modelBuilder.Entity("NIA_CRM.Models.ProductionEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmailType")
                        .IsUnique();

                    b.ToTable("productionEmails");
                });

            modelBuilder.Entity("NIA_CRM.Models.Address", b =>
                {
                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithOne("Address")
                        .HasForeignKey("NIA_CRM.Models.Address", "MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NIA_CRM.Models.Cancellation", b =>
                {
                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithMany("Cancellations")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NIA_CRM.Models.ContactOrganization", b =>
                {
                    b.HasOne("NIA_CRM.Models.Contact", "Contact")
                        .WithMany("ContactOrganizations")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.Organization", "Organization")
                        .WithMany("ContactOrganizations")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("NIA_CRM.Models.Interaction", b =>
                {
                    b.HasOne("NIA_CRM.Models.Contact", "Contact")
                        .WithMany("Interactions")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.Opportunity", "Opportunity")
                        .WithOne("Interaction")
                        .HasForeignKey("NIA_CRM.Models.Interaction", "OpportunityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Member");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("NIA_CRM.Models.Member", b =>
                {
                    b.HasOne("NIA_CRM.Models.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberMembershipType", b =>
                {
                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithMany("MemberMembershipTypes")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.MembershipType", "MembershipType")
                        .WithMany("MemberMembershipTypes")
                        .HasForeignKey("MembershipTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("MembershipType");
                });

            modelBuilder.Entity("NIA_CRM.Models.Opportunity", b =>
                {
                    b.HasOne("NIA_CRM.Models.Organization", "Organization")
                        .WithMany("Opportunities")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("NIA_CRM.Models.Organization", b =>
                {
                    b.HasOne("NIA_CRM.Models.Industry", "Industry")
                        .WithMany("Organizations")
                        .HasForeignKey("IndustryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("NIA_CRM.Models.OrganizationCode", b =>
                {
                    b.HasOne("NIA_CRM.Models.Organization", "Organization")
                        .WithMany("OrganizationCodes")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("NIA_CRM.Models.Contact", b =>
                {
                    b.Navigation("ContactOrganizations");

                    b.Navigation("Interactions");
                });

            modelBuilder.Entity("NIA_CRM.Models.Industry", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("NIA_CRM.Models.Member", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Cancellations");

                    b.Navigation("MemberMembershipTypes");
                });

            modelBuilder.Entity("NIA_CRM.Models.MembershipType", b =>
                {
                    b.Navigation("MemberMembershipTypes");
                });

            modelBuilder.Entity("NIA_CRM.Models.Opportunity", b =>
                {
                    b.Navigation("Interaction");
                });

            modelBuilder.Entity("NIA_CRM.Models.Organization", b =>
                {
                    b.Navigation("ContactOrganizations");

                    b.Navigation("Members");

                    b.Navigation("Opportunities");

                    b.Navigation("OrganizationCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
