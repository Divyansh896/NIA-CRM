@model IEnumerable<NIA_CRM.Models.Strategy>

@{
    ViewData["Title"] = "Index";
}

<h1>Strategies</h1>

<p>
    <input type="file" name="file" class="form-control me-2" required />
    
    
</p>


<form asp-action="ImportOpportunitiesFromExcel" method="post" enctype="multipart/form-data">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <a class="btn btn-dark" asp-action="ExportToExcel">
                <i class="fa fa-file-excel text-white"></i> 
                Export Excel
            </a>
            <button type="submit" class="btn btn-dark">
            <i class="fa fa-file-import"></i> Import Excel
        </button>
        </div>
        <a class ="btn btn-primary" asp-action="Create">Create New</a>
    </div>
</form>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<table class="table">
    <thead>
        <tr>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.StrategyName)
            </th>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.StrategyAssignee)
            </th>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.StrategyNote)
            </th>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.CreatedDate)
            </th>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.StrategyTerm)
            </th>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.StrategyStatus)
            </th>
            @* <th scope="col" class="table-head"></th> *@
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr class="clickable-row" data-id="@item.ID" title="Click on row to get preview">
            <td>
                @Html.DisplayFor(modelItem => item.StrategyName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StrategyAssignee)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StrategyNote)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StrategyTerm)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StrategyStatus)
            @* </td>
                <td class="d-flex flex-column">
                    <a class="btn btn-light mb-2"  asp-action="Edit" asp-route-id="@item.ID">Edit</a>
                    <a class="btn btn-light"  asp-action="Delete" asp-route-id="@item.ID">Delete</a>
            </td> *@
        </tr>
}
    </tbody>
</table>

<div id="previewContainer" class="preview-content hidden"></div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>

    <script>
        $(document).ready(function () {
            // Initially hide the preview content
            $('#previewContainer').addClass('hidden');

            // Handle click event on rows with the "clickable-row" class
            $(document).on('click', '.clickable-row', function () {
                var contactId = $(this).data('id'); // Get the Contact ID from the row's data attribute

                if (!contactId) {
                    console.error('No contact ID found for this row.');
                    return;
                }

                // Make an AJAX request to get the partial view for the selected contact
                $.ajax({
                    url: '/Stratergy/GetStratergyPreview', // Adjust the URL to match your routing
                    type: 'GET',
                    data: { id: contactId },
                    success: function (result) {
                        // Insert the result (partial view) into the preview container
                        $('#previewContainer').html(result);
                        $('#previewContainer').removeClass('hidden').addClass('visible'); // Show the preview

                        // Assign the close event to the button inside the loaded preview
                        $('#previewContainer').find('input[name="btnClose"]').on('click', function () {
                            $('#previewContainer').removeClass('visible').addClass('hidden');
                        });



                        // Assign the save event to the save button inside the loaded preview
                        $('#previewContainer').find('#saveNoteBtn').on('click', function (e) {
                            e.preventDefault(); // Prevent default button behavior

                            var memberId = $("#StratergyId").val();
                            var note = $("#Note").val();

                            if (!memberId || !note.trim()) {
                                $("#responseMessage").text("Note cannot be empty!").addClass("text-danger").removeClass("text-success").show();
                                return;
                            }

                            $.ajax({
                                type: "POST",
                                url: "/Stratergy/SaveStratergyNote",
                                data: { id: memberId, note: note },
                                dataType: "json",
                                success: function (response) {
                                    if (response.success) {
                                        $("#responseMessage").text(response.message).addClass("text-success").removeClass("text-danger").show();
                                    } else {
                                        $("#responseMessage").text(response.message).addClass("text-danger").removeClass("text-success").show();
                                    }
                                },
                                error: function () {
                                    $("#responseMessage").text("An unexpected error occurred.").addClass("text-danger").removeClass("text-success").show();
                                }
                            });
                        });


                    },
                    error: function () {
                        alert('An error occurred while loading the preview.');
                    }
                });
            });

            // Window click listener to collapse preview when clicked outside
            $(window).click(function (event) {
                if (!$(event.target).closest('#previewContainer, .clickable-row').length) {
                    $('#previewContainer').removeClass('visible').addClass('hidden');
                }
            });

            // Prevent the preview container from closing when clicked inside
            $('#previewContainer').click(function (event) {
                event.stopPropagation(); // Stop the event from propagating to the window
            });
        });

        function clearFilter(filterName) {
            // Get the current URL
            var url = window.location.href.split('?')[0]; // Current URL without query string

            // Get the query parameters from the URL
            var params = new URLSearchParams(window.location.search);
            params.delete(filterName);

            // Reload the page with the updated query string (filters removed)
            window.location.href = url + '?' + params.toString();
        }
    </script>
  
}