@model IEnumerable<NIA_CRM.Models.Strategy>

@{
    ViewData["Title"] = "Index";
}


<div class="d-flex flex-row align-items-center justify-content-between mb-4">
    <h1 class="mb-0" id="contacts-title">Strategies</h1>
</div>


<div class="d-flex align-items-center" style="padding-bottom: 10px;">


    <form asp-action="ImportData" method="post" enctype="multipart/form-data" class="d-flex">
        <button type="submit" class="btn btn-dark" style="min-width: 150px;">
            <i class="fa fa-file-import"></i> Import Excel
        </button>
        <input type="file" name="file" class="form-control" required />

    </form>
</div>


<!-- Modal for Exporting Strategies -->
<div class="modal fade" id="exportStrategiesModal" tabindex="-1" aria-labelledby="exportStrategiesModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportStrategiesModalLabel">Select Fields to Export</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="exportStrategiesForm" asp-action="ExportSelectedStrategiesFields" method="post">
                    <div class="row">
                        <div class="col-md-6">
                            <input type="checkbox" name="selectedFields" value="StrategyName" checked> Strategy Name
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" name="selectedFields" value="StrategyAssignee" checked> Assignee
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" name="selectedFields" value="StrategyNote" checked> Strategy Note
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" name="selectedFields" value="CreatedDate" checked> Created Date
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" name="selectedFields" value="StrategyTerm" checked> Term
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" name="selectedFields" value="StrategyStatus" checked> Status
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="exportStrategiesForm" class="btn btn-dark">
                    <i class="fa fa-file-excel text-white"></i> Export
                </button>
            </div>
        </div>
    </div>
</div>


@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}



<form asp-action="Index" method="get" aria-labelledby="contacts-title">
    <input type="hidden" name="sortDirection" value="@ViewData["sortDirection"]" />
    <input type="hidden" name="sortField" value="@ViewData["sortField"]" />
    @{
        var sortField = ViewData["sortField"]?.ToString();
        var sortDirection = ViewData["sortDirection"]?.ToString();
    }

    <div class="m-auto flex-grow-1">
        <div class="form-horizontal mb-3">
            <div class="d-flex align-items-center gap-2">
                <div>
                    <button class="btn btn-dark @ViewData["Filtering"]"
                            type="button"
                            id="filterToggle"
                            data-bs-toggle="collapse"
                            data-bs-target="#collapseFilter"
                            aria-expanded="false"
                            aria-controls="collapseFilter">
                        Filter/Search @ViewData["numberFilters"]
                    </button>
                </div>

                <button type="submit" name="actionButton" value="ExportExcel" class="btn btn-dark">
                    <i class="fa fa-file-excel text-white"></i>
                    Export filtered data to Excel
                </button>

                <!-- Export Button to Open Strategy Modal -->
                <button type="button" class="btn btn-dark mt-2" data-bs-toggle="modal" data-bs-target="#exportStrategiesModal">
                    <i class="fa fa-file-excel text-white"></i> Export Selected Fields for Strategy
                </button>

                <a asp-action="Create" class="btn btn-primary" aria-label="Add a new event">+ Add Strategy</a>

            </div>

            @if (ViewData["numberFilters"] != null && ViewData["numberFilters"].ToString() != "0 Filters Applied")
            {
                <div class="filters-container mt-2">
                    @if (!string.IsNullOrEmpty(ViewData["SearchString"] as string))
                    {
                        <span class="custom-filter-badge me-2">
                            Strategy Term: @ViewData["EventString"]
                            <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('SearchString')">x</button>
                        </span>
                    }
                    @if (ViewData["DateFilter"] != null)
                    {
                        <span class="custom-filter-badge me-2">
                            Date: @Convert.ToDateTime(ViewData["DateFilter"]).ToString("yyyy-MM-dd")
                            <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('DateFilter')">x</button>
                        </span>
                    }
                </div>
            }
        </div>

        <div>
            <label class="control-label">@ViewData["records"]</label>
        </div>

        <div class="collapse @ViewData["ShowFilter"] mt-2" id="collapseFilter">
            <div class="card card-body bg-light">
                <div class="row">
                    <div class="form-group col-md-3">
                        <label for="search-name" class="control-label">Search By Strategy Name:</label>
                        @Html.TextBox("SearchString", null, new { @class = "form-control", id = "search-name" })
                    </div>

                    <div class="form-group col-md-3">
                        <label for="filter-date" class="control-label">Filter by Create Date:</label>
                        <input type="date" name="date" class="form-control" id="filter-date" value="@ViewData["DateFilter"]" />
                    </div>
                    <div class="form-group col-md-4 d-flex align-items-end mt-2">
                        <input type="submit" name="actionButton" value="Apply Filters" class="btn btn-primary me-2" />
                        <a asp-action="Index" class="btn btn-dark">Clear Filters</a>
                    </div>
                </div>
            </div>
        </div>
        <table class="table table-bordered table-striped" id="event-table" aria-labelledby="strategies">
            <caption class="sr-only">Strategy table showing filtered results</caption>
            <thead class="thead-dark">
                <tr>
                    <th scope="col" class="table-head">
                        @{

                            var isCurrentSortField = sortField == "Strategy Name";
                            var sortOrderIndicator = isCurrentSortField ? (sortDirection == "asc" ? "↑" : "↓") : "";
                        }


                        @if (isCurrentSortField)
                        {
                            <input type="submit" name="actionButton" value="Strategy Name" class="btn btn-link" aria-label="Sort by Strategy Name" />
                            <span class="SortIndicator">@sortOrderIndicator</span>
                        }
                        else
                        {
                            <input type="submit" name="actionButton" value="Strategy Name" class="btn btn-link" aria-label="Sort by Strategy Name" />
                        }
                    </th>

                    <th scope="col" class="table-head">
                        @{
                            var isAsigneeCodeSortField = sortField == "Strategy Assignee";
                            var AsigneeCodeSortIndicator = isAsigneeCodeSortField ? (sortDirection == "asc" ? "↑" : "↓") : "";
                        }
                        @if (isAsigneeCodeSortField)
                        {
                            <input type="submit" name="actionButton" value="Strategy Assignee" class="btn btn-link" aria-label="Sort by Strategy Assignee" />
                            <span class="SortIndicator">@AsigneeCodeSortIndicator</span>
                        }
                        else
                        {
                            <input type="submit" name="actionButton" value="Strategy Assignee" class="btn btn-link" aria-label="Sort by Strategy Assignee" />
                        }
                    </th>
                    <th scope="col" class="table-head">
                        @Html.DisplayNameFor(model => model.StrategyNote)
                    </th>
                    <th scope="col" class="table-head">
                        @{
                            var isDateSortField = sortField == "Created Date";
                            var DateSortIndicator = isDateSortField ? (sortDirection == "asc" ? "↑" : "↓") : "";
                        }
                        @if (isDateSortField)
                        {
                            <input type="submit" name="actionButton" value="Created Date" class="btn btn-link" aria-label="Sort by Created Date" />
                            <span class="SortIndicator">@DateSortIndicator</span>
                        }
                        else
                        {
                            <input type="submit" name="actionButton" value="Created Date" class="btn btn-link" aria-label="Sort by Created Date" />
                        }
                    </th>
                    <th scope="col" class="table-head">
                        @{
                            var isTermSortField = sortField == "Startegy Term";
                            var TermSortIndicator = isTermSortField ? (sortDirection == "asc" ? "↑" : "↓") : "";
                        }
                        @if (isTermSortField)
                        {
                            <input type="submit" name="actionButton" value="Startegy Term" class="btn btn-link" aria-label="Sort by Startegy Term" />
                            <span class="SortIndicator">@TermSortIndicator</span>
                        }
                        else
                        {
                            <input type="submit" name="actionButton" value="Startegy Term" class="btn btn-link" aria-label="Sort by Startegy Term" />
                        }
                    </th>
                    <th scope="col" class="table-head">
                        @{
                            var isStatusCodeSortField = sortField == "Strategy Status";
                            var StatusCodeSortIndicator = isStatusCodeSortField ? (sortDirection == "asc" ? "↑" : "↓") : "";
                        }
                        @if (isStatusCodeSortField)
                        {
                            <input type="submit" name="actionButton" value="Strategy Status" class="btn btn-link" aria-label="Sort by Strategy Status" />
                            <span class="SortIndicator">@StatusCodeSortIndicator</span>
                        }
                        else
                        {
                            <input type="submit" name="actionButton" value="Strategy Status" class="btn btn-link" aria-label="Sort by Strategy Status" />
                        }
                    </th>
                    @* <th scope="col" class="table-head"></th> *@
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="clickable-row" data-id="@item.ID" title="Click on row to get preview">
                        <td>
                            @Html.DisplayFor(modelItem => item.StrategyName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StrategyAssignee)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StrategyNote)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CreatedDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StrategyTerm)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StrategyStatus)
                            @* </td>
                <td class="d-flex flex-column">
                    <a class="btn btn-light mb-2"  asp-action="Edit" asp-route-id="@item.ID">Edit</a>
                    <a class="btn btn-light"  asp-action="Delete" asp-route-id="@item.ID">Delete</a>
            </td> *@
                    </tr>
                }
            </tbody>
        </table>
        <partial name="_PagingNavBar" />
</form>

<div id="previewContainer" class="preview-content hidden"></div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>

    <script>
        $(document).ready(function () {
            // Initially hide the preview content
            $('#previewContainer').addClass('hidden');

            // Handle click event on rows with the "clickable-row" class
            $(document).on('click', '.clickable-row', function () {
                var contactId = $(this).data('id'); // Get the Contact ID from the row's data attribute

                if (!contactId) {
                    console.error('No contact ID found for this row.');
                    return;
                }

                // Make an AJAX request to get the partial view for the selected contact
                $.ajax({
                    url: '/Stratergy/GetStratergyPreview', // Adjust the URL to match your routing
                    type: 'GET',
                    data: { id: contactId },
                    success: function (result) {
                        // Insert the result (partial view) into the preview container
                        $('#previewContainer').html(result);
                        $('#previewContainer').removeClass('hidden').addClass('visible'); // Show the preview

                        // Assign the close event to the button inside the loaded preview
                        $('#previewContainer').find('input[name="btnClose"]').on('click', function () {
                            $('#previewContainer').removeClass('visible').addClass('hidden');
                        });



                        // Assign the save event to the save button inside the loaded preview
                        $('#previewContainer').find('#saveNoteBtn').on('click', function (e) {
                            e.preventDefault(); // Prevent default button behavior

                            var memberId = $("#StratergyId").val();
                            var note = $("#Note").val();

                            if (!memberId || !note.trim()) {
                                $("#responseMessage").text("Note cannot be empty!").addClass("text-danger").removeClass("text-success").show();
                                return;
                            }

                            $.ajax({
                                type: "POST",
                                url: "/Stratergy/SaveStratergyNote",
                                data: { id: memberId, note: note },
                                dataType: "json",
                                success: function (response) {
                                    if (response.success) {
                                        $("#responseMessage").text(response.message).addClass("text-success").removeClass("text-danger").show();
                                    } else {
                                        $("#responseMessage").text(response.message).addClass("text-danger").removeClass("text-success").show();
                                    }
                                },
                                error: function () {
                                    $("#responseMessage").text("An unexpected error occurred.").addClass("text-danger").removeClass("text-success").show();
                                }
                            });
                        });


                    },
                    error: function () {
                        alert('An error occurred while loading the preview.');
                    }
                });
            });

            // Window click listener to collapse preview when clicked outside
            $(window).click(function (event) {
                if (!$(event.target).closest('#previewContainer, .clickable-row').length) {
                    $('#previewContainer').removeClass('visible').addClass('hidden');
                }
            });

            // Prevent the preview container from closing when clicked inside
            $('#previewContainer').click(function (event) {
                event.stopPropagation(); // Stop the event from propagating to the window
            });
        });

        function clearFilter(filterName) {
            // Get the current URL
            var url = window.location.href.split('?')[0]; // Current URL without query string

            // Get the query parameters from the URL
            var params = new URLSearchParams(window.location.search);
            params.delete(filterName);

            // Reload the page with the updated query string (filters removed)
            window.location.href = url + '?' + params.toString();
        }
    </script>

}