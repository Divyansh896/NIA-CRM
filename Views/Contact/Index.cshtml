@model IEnumerable<NIA_CRM.Models.Contact>

@{
    ViewData["Title"] = "Index";
}



<div class="d-flex flex-row align-items-center justify-content-between mb-4">
    <h1 class="mb-0" id="contacts-title">Contacts</h1>
</div>

<form asp-action="Index" method="get" aria-labelledby="contacts-title">
    <input type="hidden" name="sortDirection" value="@ViewData["sortDirection"]" />
    <input type="hidden" name="sortField" value="@ViewData["sortField"]" />
    @{
        var sortField = ViewData["sortField"]?.ToString();
        var sortDirection = ViewData["sortDirection"]?.ToString();
    }



    <!-- Filter/Search Section -->
    <div class="m-auto flex-grow-1">
        <div class="form-horizontal mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <button class="btn btn-dark @ViewData["Filtering"]"
                            type="button"
                            id="filterToggle"
                            data-bs-toggle="collapse"
                            data-bs-target="#collapseFilter"
                            aria-expanded="false"
                            aria-controls="collapseFilter">
                        Filter/Search @ViewData["numberFilters"]
                    </button>
                    <button type="submit" class="btn btn-dark me-2" name="actionButton" value="ExportExcel">
                        <i class="fa fa-file-excel text-white"></i> Export to Excel
                    </button>
                </div>
                <a asp-action="Create" class="btn btn-primary" aria-label="Add a new contact">+ Add Contact</a>
            </div>
            @if (ViewData["numberFilters"] != null && ViewData["numberFilters"].ToString() != "0 Filters Applied")
            {
                <div class="filters-container mt-2">
                    @if (!string.IsNullOrEmpty(ViewData["SearchString"] as string))
                    {
                        <span class="custom-filter-badge me-2">
                            Member Name: @ViewData["SearchString"]
                            <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('SearchString')">x</button>
                        </span>
                    }
                    @if (ViewData["TitlesFilter"] != null)
                    {
                        <span class="custom-filter-badge me-2">
                            Title: @ViewData["TitlesFilter"]
                            <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('Titles')">x</button>
                        </span>
                    }
                    @if (ViewData["DepartmentsFilter"] != null)
                    {
                        <span class="custom-filter-badge me-2">
                            Department: @ViewData["DepartmentsFilter"]
                            <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('Departments')">x</button>
                        </span>
                    }
                    @if (ViewData["IsVIPFilter"] != null)
                    {
                        <span class="custom-filter-badge me-2">
                            VIPs: @ViewData["IsVIPFilter"]
                            <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('IsVIP')">x</button>
                        </span>
                    }
                </div>


            }

        </div>
        <div class="collapse @ViewData["ShowFilter"] mt-2" id="collapseFilter">
            <div class="card card-body bg-light">
                <div class="row">
                    <div class="form-group col-md-3">
                        <label for="search-name" class="control-label">Search By Name:</label>
                        @Html.TextBox("SearchString", null, new { @class = "form-control", id = "search-name" })
                    </div>

                    <div class="form-group col-md-3">
                        <label for="filter-title" class="control-label">Filter by Title:</label>
                        @Html.DropDownList("Titles", null, "All Titles", htmlAttributes: new { @class = "form-control", id = "filter-title" })
                    </div>

                    <div class="form-group col-md-3">
                        <label for="filter-department" class="control-label">Filter by Department:</label>
                        @Html.DropDownList("Departments", null, "All Departments", htmlAttributes: new { @class = "form-control", id = "filter-department" })
                    </div>

                    <div class="form-group col-md-2 d-flex align-items-end">
                        <label class="control-label me-2" for="OnlyVIP">Only VIPs:</label>
                        @Html.CheckBox("IsVIP", htmlAttributes: new { @class = "form-check-input", id = "OnlyVIP" })
                    </div>

                    <div class="form-group col-md-4 d-flex align-items-end mt-2">
                        <input type="submit" name="actionButton" value="Apply Filters" class="btn btn-primary me-2" />
                        <a asp-action="Index" class="btn btn-dark">Clear Filters</a>
                    </div>
                </div>
            </div>
        </div>



        <div>
            <label class="control-label">@ViewData["records"]</label>
        </div>

        <!-- Contacts Table -->
        <table class="table table-bordered table-striped" id="contacts-table" aria-labelledby="contacts-title">
            <caption class="sr-only">Contacts table showing filtered results</caption>
            <thead class="thead-dark">
                <tr>
                    <th scope="col" class="table-head">
                        @{

                            var isCurrentSortField = sortField == "Contact Name";
                            var sortOrderIndicator = isCurrentSortField ? (sortDirection == "asc" ? "↑" : "↓") : "";
                        }


                        @if (isCurrentSortField)
                        {
                            <input type="submit" name="actionButton" value="Contact Name" class="btn btn-link" aria-label="Sort by Contact Name" />
                            <span class="SortIndicator">@sortOrderIndicator</span>
                        }
                        else
                        {
                            <input type="submit" name="actionButton" value="Contact Name" class="btn btn-link" aria-label="Sort by Contact Name" />
                        }
                    </th>

                    <th scope="col" class="table-head">@Html.DisplayNameFor(model => model.Title)</th>
                    <th scope="col" class="table-head">@Html.DisplayNameFor(model => model.Department)</th>
                    <th scope="col" class="table-head">@Html.DisplayNameFor(model => model.Email)</th>
                    <th scope="col" class="table-head">@Html.DisplayNameFor(model => model.Phone)</th>
                    <th scope="col" class="table-head">@Html.DisplayNameFor(model => model.LinkedInUrl)</th>
                    <th scope="col" class="table-head">@Html.DisplayNameFor(model => model.IsVip)</th>
                    <th scope="col" class="table-head">Member</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="clickable-row" data-id="@item.Id" title="Click on row to get preview">
                        <td>@Html.DisplayFor(modelItem => item.Summary)</td>
                        <td>@Html.DisplayFor(modelItem => item.Title)</td>
                        <td>@Html.DisplayFor(modelItem => item.Department)</td>
                        <td>@Html.DisplayFor(modelItem => item.Email)</td>
                        <td>
                            <a href="tel:@item.PhoneFormatted" id="phoneNumber">@item.PhoneFormatted</a>
                        </td>
                        <td>
                            <a href="@item.LinkedInUrl" target="_blank" aria-label="Open LinkedIn profile of @item.FirstName @item.LastName">View LinkedIn</a>
                        </td>
                        <td>@Html.DisplayFor(modelItem => item.IsVip)</td>
                        <td>@Html.DisplayFor(modelItem => item.MemberContacts.FirstOrDefault().Member.MemberName)</td>

                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Preview Container -->
    <div id="previewContainer" class="preview-content hidden" role="region" aria-labelledby="previewTitle">
        <h2 id="previewTitle" class="sr-only">Preview Section</h2>
        <!-- Preview content will be dynamically injected here -->
    </div>

    <!--Button for export to excel -->
    <div class="d-flex justify-content-between align-items-center mt-3">
    </div>


    <partial name="_PagingNavBar" />
</form>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/js/PhoneNumber.js"></script>
    <script>
              $(document).ready(function () {
            // Initially hide the preview content
            $('#previewContainer').addClass('hidden');

            // Handle click event on rows with the "clickable-row" class
            $(document).on('click', '.clickable-row', function () {
                var contactId = $(this).data('id'); // Get the Contact ID from the row's data attribute

                if (!contactId) {
                    console.error('No contact ID found for this row.');
                    return;
                }

                // Make an AJAX request to get the partial view for the selected contact
                $.ajax({
                    url: '/Contact/GetContactPreview', // Adjust the URL to match your routing
                    type: 'GET',
                    data: { id: contactId },
                    success: function (result) {
                        // Insert the result (partial view) into the preview container
                        $('#previewContainer').html(result);
                        $('#previewContainer').removeClass('hidden').addClass('visible'); // Show the preview
                        // Assign the close event to the button inside the loaded preview
                        $('#previewContainer').find('input[name="btnClose"]').on('click', function () {
                            $('#previewContainer').removeClass('visible').addClass('hidden');
                        });
                    },
                    error: function () {
                        alert('An error occurred while loading the preview.');
                    }
                });
            });

            // Window click listener to collapse preview when clicked outside
            $(window).click(function (event) {
                if (!$(event.target).closest('#previewContainer, .clickable-row').length) {
                    $('#previewContainer').removeClass('visible').addClass('hidden');
                }
            });

            // Prevent the preview container from closing when clicked inside
            $('#previewContainer').click(function (event) {
                event.stopPropagation(); // Stop the event from propagating to the window
            });
        });

        function clearFilter(filterName){
            // Get the current URL
            var url = window.location.href.split('?')[0]; // Current URL without query string

            // Get the query parameters from the URL
            var params = new URLSearchParams(window.location.search);
            params.delete(filterName)

            // Reload the page with the updated query string (filters removed)
            window.location.href = url + '?' + params.toString();

        }
    </script>
    <script type="text/javascript">
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })
    </script>
}