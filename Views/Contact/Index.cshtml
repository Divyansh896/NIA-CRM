@model IEnumerable<NIA_CRM.Models.Contact>

@{
    ViewData["Title"] = "Index";
}




<partial name="_addArchiveModal" />
<partial name="_notificationModal" />
<partial name="_SuccessMessage" />




<!-- Export Fields Modal for Contacts -->
<div class="modal fade" id="exportContactsModal" tabindex="-1" aria-labelledby="exportContactsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportContactsModalLabel">Select Fields to Export</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="exportContactsForm" asp-action="ExportSelectedContactsFields" method="post">
                    @* Hidden fields to pass the filters to the Export Controller *@
                    <input type="hidden" name="SearchString" id="modalSearchString" value="@ViewData["SearchString"]">
                    <input type="hidden" name="Title" id="modalTitleFilter" value="@ViewData["TitlesFilter"]">
                    <input type="hidden" name="Department" id="modalDepartmentFilter" value="@ViewData["DepartmentsFilter"]">
                    <input type="hidden" name="VIP" id="modalVipFilter" value="@ViewData["IsVIPFilter"]">
                    <input type="hidden" name="MemberNameSearchString" id="modalMemberNameSearchString" value="@ViewData["MemberNameSearchString"]">

                    <div class="form-check mb-3">
                        <input type="checkbox" class="form-check-input" id="includeFilters" name="applyFilters" value="true" checked>
                        <label class="form-check-label" for="includeFilters">Include current filters in export</label>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <input type="checkbox" id="chkContactFirstName" name="selectedFields" value="ContactFirstName" checked>
                            <label for="chkContactFirstName">Contact First Name</label>
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" id="chkContactMiddleName" name="selectedFields" value="ContactMiddleName" checked>
                            <label for="chkContactMiddleName">Contact Middle Name</label>
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" id="chkContactLastName" name="selectedFields" value="ContactLastName" checked>
                            <label for="chkContactLastName">Contact Last Name</label>
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" id="chkContactTitle" name="selectedFields" value="ContactTitle" checked>
                            <label for="chkContactTitle">Contact Title</label>
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" id="chkContactDepartment" name="selectedFields" value="ContactDepartment" checked>
                            <label for="chkContactDepartment">Contact Department</label>
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" id="chkEmail" name="selectedFields" value="Email" checked>
                            <label for="chkEmail">Email</label>
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" id="chkPhone" name="selectedFields" value="Phone" checked>
                            <label for="chkPhone">Phone</label>
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" id="chkLinkedInUrl" name="selectedFields" value="LinkedInUrl" checked>
                            <label for="chkLinkedInUrl">LinkedIn URL</label>
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" id="chkIsVip" name="selectedFields" value="IsVip" checked>
                            <label for="chkIsVip">Is VIP</label>
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" id="chkContactNote" name="selectedFields" value="ContactNote" checked>
                            <label for="chkContactNote">Contact Note</label>
                        </div>
                        <div class="col-md-6">
                            <input type="checkbox" id="chkMemberName" name="selectedFields" value="MemberName" checked>
                            <label for="chkMemberName">Member Name</label>
                        </div>

                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="exportContactsForm" class="btn btn-dark" data-bs-dismiss="modal">
                    <i class="fa fa-file-excel text-white"></i> Export
                </button>
                <!-- Help Icon for Export Instructions -->
                <i class="fa fa-question-circle help-icon ms-2" data-bs-toggle="modal" data-bs-target="#exportHelpModal" title="Click for export instructions"></i>
            </div>

        </div>
    </div>
</div>


<!-- Import Help Modal -->
<div class="modal fade" id="importHelpModal" tabindex="-1" aria-labelledby="importHelpModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="importHelpModalLabel">Import Instructions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>
                    Click the "Import Excel" button to upload an Excel file containing member details.
                    Please ensure your file is in the proper format (e.g.Excel) and contains all required columns.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Export Help Modal -->
<div class="modal fade" id="exportHelpModal" tabindex="-1" aria-labelledby="exportHelpModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportHelpModalLabel">Export Instructions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>
                    Select the fields you wish to export by checking the corresponding boxes.
                    If you have applied filters, you can choose to export the filtered data. Then click the "Export" button to download the file.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<div class="d-flex flex-row align-items-center justify-content-between mb-4">
    <h1 class="mb-0" id="contacts-title">Contacts</h1>
</div>
<partial name="_ErrorMessage" />


@if (User.IsInRole("Admin"))
{
    <form asp-action="ImportFromExcel" method="post" enctype="multipart/form-data">
        <div class="d-flex align-items-center" style="padding-bottom: 10px;">

            <input type="file" name="file" class="form-control me-2" required />
            <button type="submit" class="btn btn-dark me-2" style="min-width: 150px;">
                <i class="fa fa-file-import"></i> Import Excel
            </button>

        </div>
    </form>
}

<form asp-action="Index" method="get" aria-labelledby="contacts-title">
    <input type="hidden" name="sortDirection" value="@ViewData["sortDirection"]" />
    <input type="hidden" name="sortField" value="@ViewData["sortField"]" />
    @{
        var sortField = ViewData["sortField"]?.ToString();
        var sortDirection = ViewData["sortDirection"]?.ToString();
    }



    <!-- Filter/Search Section -->
    <div class="m-auto flex-grow-1">
        <div class="form-horizontal mb-3">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="d-flex flex-wrap">
                    <button class="btn btn-dark @ViewData["Filtering"] me-2 mb-2" type="button" id="filterToggle" data-bs-toggle="collapse" data-bs-target="#collapseFilter" aria-expanded="false" aria-controls="collapseFilter">
                        Filter/Search @ViewData["numberFilters"]
                    </button>
                    @if (User.IsInRole("Admin"))
                    {
                        <button type="button" class="btn btn-primary me-2 mb-2" data-bs-toggle="modal" data-bs-target="#addNotificationModal">
                            Send Email
                        </button>
                        <button type="button" class="btn btn-dark me-2 mb-2" id="toggleCheckboxes">
                            Enable Contact Selection
                        </button>
                        @* <button type="submit" name="actionButton" value="ExportExcel" class="btn btn-dark me-2 mb-2">
                        <i class="fa fa-file-excel text-white"></i>
                        Export filtered data to Excel
                    </button> *@
                        <button type="button" class="btn btn-dark me-2 mb-2" data-bs-toggle="modal" data-bs-target="#exportContactsModal">
                            <i class="fa fa-file-excel text-white"></i> Export Selected Fields
                        </button>
                    }
                </div>
                @if (User.IsInRole("Admin"))
                {
                    <a asp-action="Create" class="btn btn-primary" aria-label="Add a new contact">+ Add Contact</a>
                }

            </div>

        </div>

    </div>

    <!-- Filters clear banners -->
    @if (ViewData["numberFilters"] != null && ViewData["numberFilters"].ToString() != "0 Filters Applied")
    {
        <div class="filters-container mt-2">
            @if (!string.IsNullOrEmpty(ViewData["SearchString"] as string))
            {
                <span class="custom-filter-badge me-2">
                    Member Name: @ViewData["SearchString"]
                    <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('SearchString')">x</button>
                </span>
            }
            @if (!string.IsNullOrEmpty(ViewData["MemberNameSearchString"] as string))
            {
                <span class="custom-filter-badge me-2">
                    Member Name: @ViewData["MemberNameSearchString"]
                    <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('MemberNameSearchString')">x</button>
                </span>
            }

            @if (ViewData["TitlesFilter"] != null)
            {
                <span class="custom-filter-badge me-2">
                    Title: @ViewData["TitlesFilter"]
                    <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('Titles')">x</button>
                </span>
            }
            @if (ViewData["DepartmentsFilter"] != null)
            {
                <span class="custom-filter-badge me-2">
                    Department: @ViewData["DepartmentsFilter"]
                    <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('Departments')">x</button>
                </span>
            }
            @if (ViewData["IsVIPFilter"] != null)
            {
                <span class="custom-filter-badge me-2">
                    VIPs: @ViewData["IsVIPFilter"]
                    <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('IsVIP')">x</button>
                </span>
            }
        </div>


    }
   



    <div class="collapse @ViewData["ShowFilter"] mt-2" id="collapseFilter">
        <div class="card card-body bg-light">
            <div class="row">
                <div class="form-group col-md-3">
                    <label for="search-name" class="control-label">Search By Contact Name:</label>
                    @Html.TextBox("SearchString", null, new { @class = "form-control", id = "search-name", placeholder = "Enter Contact Name" })
                </div>
                <div class="form-group col-md-3">
                    <label for="search-name" class="control-label">Search By Member Name:</label>
                    @Html.TextBox("MemberNameSearchString", ViewData["MemberNameSearchString"] as string, new { @class = "form-control", id = "search-name", placeholder = "Enter Member Name" })
                </div>

                <div class="form-group col-md-3">
                    <label for="filter-title" class="control-label">Filter by Title:</label>
                    @Html.DropDownList("Titles", null, "All Titles", htmlAttributes: new { @class = "form-control", id = "filter-title" })
                </div>

                <div class="form-group col-md-3">
                    <label for="filter-department" class="control-label">Filter by Department:</label>
                    @Html.DropDownList("Departments", null, "All Departments", htmlAttributes: new { @class = "form-control", id = "filter-department" })
                </div>

                <div class="form-group col-md-3 d-flex mt-1">
                    <label class="control-label me-2" for="OnlyVIP">Only VIPs:</label>
                    @Html.CheckBox("IsVIP", htmlAttributes: new { @class = "form-check-input", id = "OnlyVIP" })
                </div>

            </div>
            <div class="form-group col-md-4 d-flex align-items-end mt-2">
                <input type="submit" name="actionButton" value="Apply Filters" class="btn btn-primary me-2" />
                <a asp-action="Index" class="btn btn-dark">Clear Filters</a>
            </div>
        </div>
    </div>



    <div>
        <label class="control-label">@ViewData["records"]</label>
    </div>

    <!-- Contacts Table -->
    <table class="table table-bordered table-striped" id="contacts-table" aria-labelledby="contacts-title">
        <caption class="sr-only">Contacts table showing filtered results</caption>
        <thead class="thead-dark">
            <tr>
                <th scope="col" class="table-head" id="checkboxHeader" style="display: none;">
                    <input type="checkbox" id="selectAllCheckboxes" style="display: none;">
                </th>
                <th scope="col" class="table-head">
                    @{

                        var isCurrentSortField = sortField == "Contact Name";
                        var sortOrderIndicator = isCurrentSortField ? (sortDirection == "asc" ? "↑" : "↓") : "";
                    }


                    @if (isCurrentSortField)
                    {
                        <input type="submit" name="actionButton" value="Contact Name" class="btn btn-link" aria-label="Sort by Contact Name" />
                        <span class="SortIndicator">@sortOrderIndicator</span>
                    }
                    else
                    {
                        <input type="submit" name="actionButton" value="Contact Name" class="btn btn-link" aria-label="Sort by Contact Name" />
                    }
                </th>
                <th scope="col" class="table-head">
                    @{
                        var isEmailSortField = sortField == "Email";
                        var EmailSortIndicator = isEmailSortField ? (sortDirection == "asc" ? "↑" : "↓") : "";
                    }
                    @if (isEmailSortField)
                    {
                        <input type="submit" name="actionButton" value="Email" class="btn btn-link" aria-label="Sort by Email" />
                        <span class="SortIndicator">@EmailSortIndicator</span>
                    }
                    else
                    {
                        <input type="submit" name="actionButton" value="Email" class="btn btn-link" aria-label="Sort by Email" />
                    }
                </th>
                <th scope="col" class="table-head">
                    @{
                        var isPhoneSortField = sortField == "Phone";
                        var PhoneSortIndicator = isPhoneSortField ? (sortDirection == "asc" ? "↑" : "↓") : "";
                    }
                    @if (isPhoneSortField)
                    {
                        <input type="submit" name="actionButton" value="Phone" class="btn btn-link" aria-label="Sort by Phone" />
                        <span class="SortIndicator">@PhoneSortIndicator</span>
                    }
                    else
                    {
                        <input type="submit" name="actionButton" value="Phone" class="btn btn-link" aria-label="Sort by Phone" />
                    }
                </th>
                <th scope="col" class="table-head">@Html.DisplayNameFor(model => model.LinkedInUrl)</th>
                <th scope="col" class="table-head">
                    @{
                        var isVIPSortField = sortField == "VIP";
                        var VIPSortIndicator = isVIPSortField ? (sortDirection == "asc" ? "↑" : "↓") : "";
                    }
                    @if (isVIPSortField)
                    {
                        <input type="submit" name="actionButton" value="VIP" class="btn btn-link" aria-label="Sort by VIP" />
                        <span class="SortIndicator">@VIPSortIndicator</span>
                    }
                    else
                    {
                        <input type="submit" name="actionButton" value="VIP" class="btn btn-link" aria-label="Sort by VIP" />
                    }
                </th>
                <th scope="col" class="table-head">
                    @{
                        var isMemberNameSortField = sortField == "Member Name";
                        var memberNameSortIndicator = isMemberNameSortField ? (sortDirection == "asc" ? "↑" : "↓") : "";
                    }
                    @if (isMemberNameSortField)
                    {
                        <input type="submit" name="actionButton" value="Member Name" class="btn btn-link" aria-label="Sort by Member Name" />
                        <span class="SortIndicator">@memberNameSortIndicator</span>
                    }
                    else
                    {
                        <input type="submit" name="actionButton" value="Member Name" class="btn btn-link" aria-label="Sort by Member Name" />
                    }
                </th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr class="clickable-row" data-id="@item.Id" title="Click on row to get preview">
                    <td class="checkbox-cell" style="display: none;">
                        <input type="checkbox" class="contact-checkbox" name="selectedContactIds" value="@item.Id" style="display: none;">
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.Summary)</td>
                    <td>@Html.DisplayFor(modelItem => item.Email)</td>
                    <td>
                        <a href="tel:@item.PhoneFormatted" id="phoneNumber">@item.PhoneFormatted</a>
                    </td>
                    <td>
                        <a href="@item.LinkedInUrl" target="_blank" aria-label="Open LinkedIn profile of @item.FirstName @item.LastName">View LinkedIn</a>
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.IsVip)</td>
                    <td>
                        @if (item.MemberContacts != null && item.MemberContacts.Any())
                        {
                            <span>
                                @string.Join(", ", item.MemberContacts
                                         .Select(mc => mc.Member?.MemberName)
                                         .Distinct()
                                         .Where(name => !string.IsNullOrEmpty(name)))
                            </span>
                        }
                    </td>
                </tr>
            }

        </tbody>
    </table>

    <!-- Preview Container -->
    <div id="previewContainer" class="preview-content hidden" role="region" aria-labelledby="previewTitle">
        <h2 id="previewTitle" class="sr-only">Preview Section</h2>
        <!-- Preview content will be dynamically injected here -->
    </div>



    <partial name="_PagingNavBar" />
</form>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>

    <script>
              $(document).ready(function () {
            // Initially hide the preview content
            $('#previewContainer').addClass('hidden');

            // Handle click event on rows with the "clickable-row" class
            $(document).on('click', '.clickable-row', function () {
                var contactId = $(this).data('id'); // Get the Contact ID from the row's data attribute

                if (!contactId) {
                    console.error('No contact ID found for this row.');
                    return;
                }

                // Make an AJAX request to get the partial view for the selected contact
                $.ajax({
                    url: '/Contact/GetContactPreview', // Adjust the URL to match your routing
                    type: 'GET',
                    data: { id: contactId },
                    success: function (result) {
                        // Insert the result (partial view) into the preview container
                        $('#previewContainer').html(result);
                        $('#previewContainer').removeClass('hidden').addClass('visible'); // Show the preview
                        // Assign the close event to the button inside the loaded preview
                        $('#previewContainer').find('input[name="btnClose"]').on('click', function () {
                            $('#previewContainer').removeClass('visible').addClass('hidden');
                        });

                        // Assign the save event to the save button inside the loaded preview
                        $('#previewContainer').find('#saveNoteBtn').on('click', function (e) {
                            e.preventDefault(); // Prevent default button behavior

                            var contactId = $("#ContactId").val();
                            var note = $("#Note").val();

                            if (!contactId || !note.trim()) {
                                $("#responseMessage").text("Note cannot be empty!").addClass("text-danger").removeClass("text-success").show();
                                return;
                            }

                            $.ajax({
                                type: "POST",
                                url: "/Contact/SaveContactNote",
                                data: { id: contactId, note: note },
                                dataType: "json",
                                success: function (response) {
                                    if (response.success) {
                                        $("#responseMessage").text(response.message).addClass("text-success").removeClass("text-danger").show();
                                    } else {
                                        $("#responseMessage").text(response.message).addClass("text-danger").removeClass("text-success").show();
                                    }
                                },
                                error: function () {
                                    $("#responseMessage").text("An unexpected error occurred.").addClass("text-danger").removeClass("text-success").show();
                                }
                            });
                        });
                    },
                    error: function () {
                        alert('An error occurred while loading the preview.');
                    }
                });
            });

            // Window click listener to collapse preview when clicked outside
            $(window).click(function (event) {
                if (!$(event.target).closest('#previewContainer, .clickable-row').length) {
                    $('#previewContainer').removeClass('visible').addClass('hidden');
                }
            });

            // Prevent the preview container from closing when clicked inside
            $('#previewContainer').click(function (event) {
                event.stopPropagation(); // Stop the event from propagating to the window
            });
        });

        function clearFilter(filterName){
            // Get the current URL
            var url = window.location.href.split('?')[0]; // Current URL without query string

            // Get the query parameters from the URL
            var params = new URLSearchParams(window.location.search);
            params.delete(filterName)

            // Reload the page with the updated query string (filters removed)
            window.location.href = url + '?' + params.toString();

        }
    </script>
    <script type="text/javascript">
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })
    </script>

@* Notification Modal *@
    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            var modal = document.getElementById('addNotificationModal'); // Ensure modal ID is correct
            var selectedContactIds = []; // Store selected contacts

            // When the modal is about to be shown
            modal.addEventListener('show.bs.modal', function () {
                selectedContactIds = [];
                document.querySelectorAll(".contact-checkbox:checked").forEach((checkbox) => {
                    selectedContactIds.push(checkbox.value);
                });

                console.log(selectedContactIds);
                if (selectedContactIds.length === 0) {
                    alert("Please select at least one contact before sending an email.");
                    return;
                }

                // Store selected IDs in a hidden input field inside the modal
                document.getElementById("selectedContactIds").value = selectedContactIds.join(",");

                console.log("Selected Contacts:", selectedContactIds); // Debugging
            });

            // Handle form submission with AJAX
            $('#submitNotificationForm').click(function (event) {
                event.preventDefault();  // Prevent default form submission
                clearErrors();  // Clear previous error messages

                var form = $('#createNotificationForm'); // Ensure form ID is correct
                var ContactIds = document.getElementById("selectedContactIds").value; // Hidden input value
                var Subject = document.getElementById("emailSubject").value; // Subject input value
                var Body = document.getElementById("emailBody").value; // Body textarea value


                console.log("Submitting form for Contact IDs:", ContactIds); // Debugging log

                // Validate the form
                if (form.valid()) {
                    $.ajax({
                        type: "POST",
                        url: form.attr('action'),  // Form action URL
                        //data: form.serialize() + "&selectedContactIds=" + ContactIds + "&Subject=" + encodeURIComponent(Subject) + "&Body=" + encodeURIComponent(Body), // Include selected contacts, subject, and body
                        data: {
                            selectedContactIds: ContactIds,
                            Subject: Subject,
                            emailContent: Body
                        },
                        success: function (response) {
                                if (response.success) {
                                    $('#addNotificationModal').modal('hide');
                                    location.reload(); // Refresh page to reflect changes
                                } else {
                                    console.error("Error: " + response.message);
                                    showErrorMessage(response.message); // Show error messages
                                }
                            },
                        error: function (xhr) {
                            console.error("Error: ", xhr);
                            showErrorMessage("An unexpected error occurred."); // General error message
                        }
                    });
                }
            });

            // Function to show error messages in the modal
        function showErrorMessage(message) {
            var ul = document.getElementById("ErrorList");
            ul.innerHTML = "";  // Clear previous errors

            // Split and display each error message
            var errors = message.split("|");
            errors.forEach(function (error) {
                var li = document.createElement("li");
                li.innerHTML = error;
                ul.appendChild(li);
            });
        }

            // Function to handle error messages from AJAX response
            function handleAjaxErrors(xhr) {
                var errorMessages = [];
                switch (xhr.status) {
                    case 401:
                        errorMessages.push("You must be logged in first.");
                        break;
                    case 403:
                        errorMessages.push("You are not authorized for this action.");
                        break;
                    default:
                        errorMessages = xhr.responseText.split("|").slice(0, -1);
                }

                if (!errorMessages.some((str) => str !== "")) {
                    errorMessages.push("Error: Unable to complete operation");
                }


            }

            // Function to clear previous error messages
            function clearErrors() {
                var ul = document.getElementById("ErrorList");
                ul.innerHTML = "";  // Clear previous error messages
            }
        });
    </script>


@* Contact cancelltion Modal *@
    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            var modal = document.getElementById('addCancellationModal'); // Fixed modal ID

            // When the modal is about to be shown
            modal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;  // Button that triggered the modal
                var ContactId = button.getAttribute('data-id');  // Get Member ID from button

                console.log("Contact ID received:", ContactId); // Debugging log


                // Make AJAX GET request to fetch member data and fill the form dynamically
                $.ajax({
                    type: "GET",
                    url: '/ContactCancellation/Create',  // Ensure this points to the correct action URL
                    data: { ContactId: ContactId },
                    success: function (response) {
                        console.log(response.contactName);
                        if (response.success) {
                            // Populate the form with the received data
                            $('#createCancellationForm').find('input[name="ContactID"]').val(response.contactId);
                           // $('#MemberID').val(response.memberId);  // Set MemberID in the form field
                            $('#ContactName').text(response.contactName);  // Optionally display MemberName in the modal header or form
                        } else {
                            console.error("Failed to fetch member data:", response.message);
                        }
                    },
                    error: function (xhr) {
                        console.error("Error fetching member data:", xhr);
                    }
                });
            });

            // Handle form submission with AJAX
            $('#submitCancellationCreate').click(function (event) {
            event.preventDefault();  // Prevent default form submission
            clearErrors();  // Clear previous error messages

            var form = $('#createCancellationForm'); // Fixed form ID
            var ContactId = $('#ContactID').val(); // Get Member ID from hidden input field
            ContactId = parseInt(ContactId);
            console.log("Submitting form for Contact ID:", ContactId); // Debugging log

            // Validate the form
            if (form.valid()) {
                $.ajax({
                    type: "POST",
                    url: form.attr('action'),  // The form's action URL
                    data: form.serialize() + "&ContactID=" + ContactID, // Ensure MemberID is included
                    success: function (response) {
                        if (response.success) {
                            $('#addCancellationModal').modal('hide');
                            //alert(response.message); // Optionally show success message
                            location.reload(); // Refresh page to reflect changes
                        } else {
                            console.error("Error: " + response.message);
                            showErrorMessage(response.message); // Show error messages
                        }
                    },
                    error: function (xhr) {
                        console.error("Error: ", xhr);
                        showErrorMessage("An unexpected error occurred."); // General error message
                    }
                });
            }

            return false; // Prevent default form submission
        });

        // Function to show error messages in the modal
        function showErrorMessage(message) {
            var ul = document.getElementById("ErrorList");
            ul.innerHTML = "";  // Clear previous errors

            // Split and display each error message
            var errors = message.split("|");
            errors.forEach(function (error) {
                var li = document.createElement("li");
                li.innerHTML = error;
                ul.appendChild(li);
            });
        }

            // Function to handle error messages from AJAX response
            function handleAjaxErrors(xhr) {
                var errorMessages = [];
                switch (xhr.status) {
                    case 401:
                        errorMessages.push("You must be logged in first.");
                        break;
                    case 403:
                        errorMessages.push("You are not authorized for this action.");
                        break;
                    default:
                        errorMessages = xhr.responseText.split("|").slice(0, -1);
                }

                if (!errorMessages.some((str) => str !== "")) {
                    errorMessages.push("Error: Unable to complete operation");
                }


            }

            // Function to clear previous error messages
            function clearErrors() {
                var ul = document.getElementById("ErrorList");
                ul.innerHTML = "";  // Clear previous error messages
            }
        });
    </script>

@* script to toggle checkboxes for selection  *@
    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            var toggleButton = document.getElementById("toggleCheckboxes");
            var checkboxes = document.querySelectorAll(".contact-checkbox");
            var selectAllCheckbox = document.getElementById("selectAllCheckboxes");
            var checkboxHeader = document.getElementById("checkboxHeader");
            var checkboxCells = document.querySelectorAll(".checkbox-cell");
            var isVisible = false;

            toggleButton.addEventListener("click", function () {
                isVisible = !isVisible;
                checkboxes.forEach(cb => cb.style.display = isVisible ? "inline-block" : "none");
                selectAllCheckbox.style.display = isVisible ? "inline-block" : "none";
                checkboxHeader.style.display = isVisible ? "table-cell" : "none";
                checkboxCells.forEach(cell => cell.style.display = isVisible ? "table-cell" : "none");
                toggleButton.textContent = isVisible ? "Disable Contact Selection" : "Enable Contact Selection";
            });

            selectAllCheckbox.addEventListener("change", function () {
                checkboxes.forEach(cb => cb.checked = selectAllCheckbox.checked);
            });
        });
    </script>


}