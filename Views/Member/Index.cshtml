@model IEnumerable<NIA_CRM.Models.Member>

@{
    ViewData["Title"] = "Index";
}


<partial name="_addArchiveModal" />

<form asp-action="ImportExcel" method="post" enctype="multipart/form-data">
    <div class="form-group">
        <label for="fileUpload">Import Members (Excel File):</label>
        <input type="file" name="fileUpload" class="form-control" />
    </div>
    <button type="submit" class="btn btn-dark"> <i class="fa fa-file-import"></i> Import Excel</button>
</form>
<button class="btn btn-sm btn-outline-secondary" id="nowAddSpecialty"
        data-bs-toggle="modal" data-id="1" data-bs-target="#addSpecialtyModal"
        type="button">
    <strong>Member Archive</strong>
</button>
<div class="d-flex flex-row align-items-center justify-content-between mb-4">
    <h1 class="mb-0" id="member-title">Members</h1>
</div>
<form asp-action="Index" method="get" aria-labelledby="form-title">
    <h2 id="form-title" class="sr-only">Filter and Search Form</h2>
    <input type="hidden" name="sortDirection" value="@ViewData["sortDirection"]" />
    <input type="hidden" name="sortField" value="@ViewData["sortField"]" />
    <!-- Filter/Search Toggle Button -->
    <div class="form-horizontal mb-3">
    <div class="d-flex justify-content-between align-items-center">
        <div>
        <button class="btn btn-dark @ViewData["Filtering"]"
                type="button"
                id="filterToggle"
                data-bs-toggle="collapse"
                data-bs-target="#collapseFilter"
                aria-expanded="false"
                aria-controls="collapseFilter">
            Filter/Search @ViewData["numberFilters"]
        </button>
                <button type="submit" name="actionButton" value="ExportExcel" class="btn btn-dark"> <i class="fa fa-file-excel text-white"></i>
                    Export to Excel</button>
               
            </div>
            <a asp-controller="Member" asp-action="Create" class="btn btn-primary">+ Add Members</a>
    </div>

        

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                @TempData["ErrorMessage"]
            </div>
        }

       

        @if (ViewData["numberFilters"] != null && ViewData["numberFilters"].ToString() != "0 Filters Applied")
        {
            <div class="filters-container mt-2">
                @if (!string.IsNullOrEmpty(ViewData["SearchString"] as string))
                {
                    <span class="custom-filter-badge me-2">
                        Member Name: @ViewData["SearchString"]
                        <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('SearchString')">x</button>
                    </span>
                }
                @if (ViewData["JoinDate"] != null)
                {
                    <span class="custom-filter-badge me-2">
                        Join Date: @ViewData["JoinDate"]
                        <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('JoinDate')">x</button>
                    </span>
                }
                @if (ViewData["MembershipTypesFilter"] != null)
                {
                    <span class="custom-filter-badge me-2">
                        Membership Type: @ViewData["MembershipTypesFilter"]
                        <button type="button" class="ms-2 clear-btn" aria-label="Clear" onclick="clearFilter('MembershipTypes')">x</button>
                    </span>
                }
            </div>


        }


        <!-- Filter/Search Form -->
        <div class="collapse @ViewData["ShowFilter"] mt-2" id="collapseFilter">
            <div class="card card-body bg-light" role="region" aria-labelledby="filter-section-title">
                <h2 id="filter-section-title" class="sr-only">Filter and Search Options</h2>
                <div class="row">
                    <!-- Filter by Member Name -->
                    <div class="form-group col-md-4">
                        <label for="SearchString" class="control-label">Search by Member Name:</label>
                        @Html.TextBox("SearchString", ViewData["SearchString"] as string, new
                            {
                                @class = "form-control",
                                id = "SearchString",
                                placeholder = "Enter Member Name"

                            })
                        <span id="search-name-help" class="sr-only">Type the member name to search.</span>
                    </div>
                    <!-- Filter by Join Date -->
                    <div class="form-group col-md-4">
                        <label for="JoinDate" class="control-label">Filter by Join Date:</label>
                        @Html.TextBox("JoinDate", ViewData["JoinDate"] as string, new
                            {
                                @class = "form-control",
                                id = "JoinDate",
                                placeholder = "YYYY-MM-DD",
                                type = "date"

                            })
                        <span id="join-date-help" class="sr-only">Enter the date in YYYY-MM-DD format.</span>
                    </div>
                    <div class="form-group col-md-4">
                        <label for="MembershipTypes" class="control-label">Filter by Membership Types:</label>
                        @Html.DropDownList("MembershipTypes", null, "All MembershipTypes", htmlAttributes: new { @class = "form-control" })
                        <span id="industry-help" class="sr-only">Select Membership Types to filter members by.</span>
                    </div>
                    <!-- Filter by Organization Name -->
                    @* <div class="form-group col-md-4"> *@
                    @*     <label for="Organization" class="control-label">Search by Organization Name:</label> *@
                    @*     @Html.TextBox("Organization", ViewData["Organization"] as string, new *@
                    @*         { *@
                    @*             @class = "form-control", *@
                    @*             id = "Organization", *@
                    @*             placeholder = "Enter Organization Name" *@

                    @*         }) *@
                    @*     <span id="organization-name-help" class="sr-only">Type the organization name to filter.</span> *@
                    @* </div> *@

                    <!-- Buttons -->
                    <div class="form-group col-md-4 d-flex align-items-end mt-2">
                        <input type="submit" name="actionButton" value="Apply Filters" class="btn btn-primary me-2" />
                        <a asp-action="Index" class="btn btn-dark">Clear Filters</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div>
        <label class="control-label">@ViewData["records"]</label>
    </div>
    <table class="table table-bordered table-striped" id="myTable" aria-label="Member Details Table">
        <thead>
            <tr>
                <th scope="col" class="table-head">Member Name</th>
                <th scope="col" class="table-head">City</th>
                <th scope="col" class="table-head">Join Date</th>
                <th scope="col" class="table-head">Membership Type</th>
                <th scope="col" class="table-head">Address</th>
                <th scope="col" class="table-head">Contacts</th>
        </tr>
    </thead>
    <tbody>

            @foreach (var item in Model)
            {
                <tr class="clickable-row" data-id="@item.ID" title="Click on row to get preview">
                    <td>
                        @Html.DisplayFor(modelItem => item.MemberName)
                    </td>
                    <td>
                        @if (item.Addresses != null)
                        {
                            foreach (var industry in item.Addresses)
                            {
                                @industry.City
                                <br />
                            }
                        }
                    </td>

                    <td>
                        @Html.DisplayFor(modelItem => item.JoinDate)
                    </td>

                    <td>
                        @if (item.MemberMembershipTypes != null)
                        {
                            foreach (var industry in item.MemberMembershipTypes)
                            {
                                @industry.MembershipType.TypeName
                                <br />
                            }
                        }
                    </td>



                    <!-- New Columns -->
                    <td>
                        @if (item.Addresses != null && item.Addresses.Any())
                        {
                            foreach (var address in item.Addresses)
                            {
                                @($"{address.AddressLine2}, {address.City}, {address.StateProvince}, {address.PostalCode}")
                                <br />
                            }
                        }
                        else
                        {
                            <span class="text-muted">No Address Available</span>
                        }
                    </td>


                    <td>
                        @if (item.MemberContacts != null && item.MemberContacts.Any())
                        {
                            foreach (var memberContact in item.MemberContacts)
                            {
                                var contact = memberContact.Contact; // Get the actual Contact object
                                if (contact != null)
                                {
                                    @($"{contact.Phone} | {contact.Email}")
                                    <br />
                                }
                            }
                        }
                        else
                        {
                            <span class="text-muted">No Contacts Available</span>
                        }
                    </td>

                    
        </tr>
}
        </tbody>

</table>
    <partial name="_PagingNavBar" />

</form>

<div id="previewContainer" class="preview-content hidden"></div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>

    <script>
        $(document).ready(function () {
            // Initially hide the preview content
            $('#previewContainer').addClass('hidden');

            // Handle click event on rows with the "clickable-row" class
            $(document).on('click', '.clickable-row', function () {
                var contactId = $(this).data('id'); // Get the Contact ID from the row's data attribute

                if (!contactId) {
                    console.error('No contact ID found for this row.');
                    return;
                }

                // Make an AJAX request to get the partial view for the selected contact
                $.ajax({
                    url: '/Member/GetMemberPreview', // Adjust the URL to match your routing
                    type: 'GET',
                    data: { id: contactId },
                    success: function (result) {
                        // Insert the result (partial view) into the preview container
                        $('#previewContainer').html(result);
                        $('#previewContainer').removeClass('hidden').addClass('visible'); // Show the preview

                        // Assign the close event to the button inside the loaded preview
                        $('#previewContainer').find('input[name="btnClose"]').on('click', function () {
                            $('#previewContainer').removeClass('visible').addClass('hidden');
                        });

                         

                        // Assign the save event to the save button inside the loaded preview
                        $('#previewContainer').find('#saveNoteBtn').on('click', function (e) {
                            e.preventDefault(); // Prevent default button behavior

                            var memberId = $("#MemberId").val();
                            var note = $("#Note").val();

                            if (!memberId || !note.trim()) {
                                $("#responseMessage").text("Note cannot be empty!").addClass("text-danger").removeClass("text-success").show();
                                return;
                            }

                            $.ajax({
                                type: "POST",
                                url: "/Member/SaveMemberNote",
                                data: { id: memberId, note: note },
                                dataType: "json",
                                success: function (response) {
                                    if (response.success) {
                                        $("#responseMessage").text(response.message).addClass("text-success").removeClass("text-danger").show();
                                    } else {
                                        $("#responseMessage").text(response.message).addClass("text-danger").removeClass("text-success").show();
                                    }
                                },
                                error: function () {
                                    $("#responseMessage").text("An unexpected error occurred.").addClass("text-danger").removeClass("text-success").show();
                                }
                            });
                        });


                    },
                    error: function () {
                        alert('An error occurred while loading the preview.');
                    }
                });
            });

            // Window click listener to collapse preview when clicked outside
            $(window).click(function (event) {
                if (!$(event.target).closest('#previewContainer, .clickable-row').length) {
                    $('#previewContainer').removeClass('visible').addClass('hidden');
                }
            });

            // Prevent the preview container from closing when clicked inside
            $('#previewContainer').click(function (event) {
                event.stopPropagation(); // Stop the event from propagating to the window
            });
        });

        function clearFilter(filterName) {
            // Get the current URL
            var url = window.location.href.split('?')[0]; // Current URL without query string

            // Get the query parameters from the URL
            var params = new URLSearchParams(window.location.search);
            params.delete(filterName);

            // Reload the page with the updated query string (filters removed)
            window.location.href = url + '?' + params.toString();
        }
    </script>
   <script type="text/javascript">
               $('#submitSpecialtyCreate').click(function (event) {
            event.preventDefault();
            ClearErrors();

            var form = $('#createSpecialtyForm');
            var memberId = $(this).data('id'); // Get member ID from the button
            console.log(memberId)
            // Set the memberId value into the hidden input field inside the modal
            $('#MemberIdInModal').val("hrllo");

            console.log(form);  // Check if form is populated with data

            if (form.valid()) {
                $.ajax({
                    type: "POST",
                    url: form.attr('action'),  // The action URL for the form
                    data: form.serialize(),    // Serialize form data including MemberID
                    success: function (response) {
                        if (response.success) {
                            $('#addSpecialtyModal').modal('hide');
                            // Optionally, show a success message or reload the page
                            alert(response.message);
                        }
                    },
                    error: function (xhr) {
                        var errorMessages = [];
                        switch (xhr.status) {
                            case 401:
                                errorMessages.push("You must be logged in first.");
                                break;
                            case 403:
                                errorMessages.push("You are not authorized for this action.");
                                break;
                            default:
                                errorMessages = xhr.responseText.split("|").slice(0, -1);
                        }

                        if (!errorMessages.some((str) => str !== "")) {
                            errorMessages.push("Error: Unable to complete operation");
                        }

                        var ul = document.getElementById("ErrorList");
                        for (var i = 0; i < errorMessages.length; i++) {
                            var errorMessage = errorMessages[i];
                            var li = document.createElement("li");
                            li.innerHTML = errorMessage;
                            ul.appendChild(li);
                        }
                    }
                });
            }

            return false; // Prevent the default form submission behavior
        });

        function ClearErrors() {
            var ul = document.getElementById("ErrorList");
            while (ul.firstChild) {
                ul.removeChild(ul.firstChild);
            }
        }

   </script>
    
}