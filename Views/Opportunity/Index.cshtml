@model IEnumerable<NIA_CRM.Models.Opportunity>

@{
    ViewData["Title"] = "Index";
}

<h1>Opportunities</h1>


<form asp-action="ImportOpportunitiesFromExcel" method="post" enctype="multipart/form-data">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <a class="btn btn-dark" asp-action="ExportOpportunitiesToExcel"><i class="fa fa-file-excel text-white"></i> 
                Export Excel</a>
            <input type="file" name="file" class="form-control me-2" required />
            <button type="submit" class="btn btn-dark">
                <i class="fa fa-file-import"></i> Import Excel
            </button>
        </div>
        <a class="btn btn-primary" asp-action="Create">Create New</a>
    </div>
</form>


@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}


<table class="table">
    <thead>
        <tr>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.OpportunityName)
            </th>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.OpportunityAction)
            </th >
            <th scope ="col" class="table-head">
                @Html.DisplayNameFor(model => model.POC)
            </th>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.Account)
            </th>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.Interaction)
            </th>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.LastContact)
            </th>
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.OpportunityStatus)
            </th >
            <th scope="col" class="table-head">
                @Html.DisplayNameFor(model => model.OpportunityPriority)
            </th>
            @* <th scope="col" class="table-head"></th> *@
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr class="clickable-row" data-id="@item.ID" title="Click on row to get preview">
            <td>
                @Html.DisplayFor(modelItem => item.OpportunityName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OpportunityAction)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.POC)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Account)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Interaction)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastContact)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OpportunityStatus)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OpportunityPriority)
            </td>
            @* <td class="d-flex flex-column">
                    <a class="btn btn-light mb-2" asp-action="Edit" asp-route-id="@item.ID">Edit</a>
                    <a class="btn btn-light" asp-action="Delete" asp-route-id="@item.ID">Delete</a>
            </td> *@
        </tr>
}
    </tbody>
</table>
<div id="previewContainer" class="preview-content hidden"></div>



@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>

    <script>
        $(document).ready(function () {
            // Initially hide the preview content
            $('#previewContainer').addClass('hidden');

            // Handle click event on rows with the "clickable-row" class
            $(document).on('click', '.clickable-row', function () {
                var contactId = $(this).data('id'); // Get the Contact ID from the row's data attribute

                if (!contactId) {
                    console.error('No contact ID found for this row.');
                    return;
                }

                // Make an AJAX request to get the partial view for the selected contact
                $.ajax({
                    url: '/Opportunity/GetOpportunityPreview', // Adjust the URL to match your routing
                    type: 'GET',
                    data: { id: contactId },
                    success: function (result) {
                        // Insert the result (partial view) into the preview container
                        $('#previewContainer').html(result);
                        $('#previewContainer').removeClass('hidden').addClass('visible'); // Show the preview

                        // Assign the close event to the button inside the loaded preview
                        $('#previewContainer').find('input[name="btnClose"]').on('click', function () {
                            $('#previewContainer').removeClass('visible').addClass('hidden');
                        });



                       

                    },
                    error: function () {
                        alert('An error occurred while loading the preview.');
                    }
                });
            });

            // Window click listener to collapse preview when clicked outside
            $(window).click(function (event) {
                if (!$(event.target).closest('#previewContainer, .clickable-row').length) {
                    $('#previewContainer').removeClass('visible').addClass('hidden');
                }
            });

            // Prevent the preview container from closing when clicked inside
            $('#previewContainer').click(function (event) {
                event.stopPropagation(); // Stop the event from propagating to the window
            });
        });

        function clearFilter(filterName) {
            // Get the current URL
            var url = window.location.href.split('?')[0]; // Current URL without query string

            // Get the query parameters from the URL
            var params = new URLSearchParams(window.location.search);
            params.delete(filterName);

            // Reload the page with the updated query string (filters removed)
            window.location.href = url + '?' + params.toString();
        }
    </script>
  
}